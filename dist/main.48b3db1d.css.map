{"version":3,"sources":["styles/base/_typography.scss","styles/abstracts/_variables.scss","styles/abstracts/_utilities.scss","styles/abstracts/_fonts.scss","styles/base/_base.scss","styles/abstracts/_mixins.scss","styles/base/_reset.scss","styles/utilities/_container.scss","styles/utilities/_flow.scss","styles/utilities/_sr-only.scss","styles/utilities/_grid.scss"],"names":[],"mappings":"AAEQ;ACGR;EAEM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAOS;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAyBH;EAAA;EAAA;EAAA;EAAA;EAiBT;;ACrDA;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;AALH;EACG;;;AAGH;EACG;;;ACDS;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AAKH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AAKH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AADH;EACG;;;AClBlB;ECqBG,SADiB;EAEjB,gBDrBqB;;;AAGxB;EACG;;;AAGH;EACG;EACA;EACA;;;AAGH;EACG;;;AAGH;EACG;EACA;EACA;;AACA;EACG;;;AAIN;AAAA;EAEG;EACA;EACA;;;AEjCH;AACA;AAAA;AAAA;EAGG;;;AAGH;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAUG;;;AAGH;AACA;AAAA;EAEG;EACA;EACA;;;AAGH;AACA;EACG;;;AAGH;AACA;EACG;EACA;EACA;EACA;;;AAGH;AACA;EACG;;;AAGH;AACA;AAAA;EAEG;EACA;;;AAGH;AACA;AAAA;AAAA;AAAA;EAIG;;;AAGH;AACA;EACG;IACG;;;EAEH;AAAA;AAAA;IAGG;IACA;IACA;IACA;;;ANrEN;EACG;;;AOHH;EACG;EACA;EACA;;;ACHH;EACG;;;ACDH;EACG;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;;ACTH;EACG;EACA;;ALkGG;EKpGN;IAIM;IACA","file":"main.48b3db1d.css","sourceRoot":"../src","sourcesContent":["@use 'abstracts' as *;\n\n@import url('https://fonts.googleapis.com/css2?family=Rubik:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,300;1,400&display=swap');\n\nbody {\n   font: var(--fs-100) / var(--lh-100) var(--ff-pm);\n}\n","@use 'layout' as *;\n@use 'font-sizes' as *;\n@use 'mixins' as *;\n@use 'colors' as *;\n\n:root {\n   @each $color, $value in $colors {\n      --clr-#{$color}: #{$value};\n   }\n\n   @each $screen-size, $map in $type-scale {\n      @if $screen-size == mobile {\n         @each $feature, $nested-map in $map {\n            @each $prop, $value in $nested-map {\n               --#{$prop}: #{$value};\n            }\n         }\n      } @else if $screen-size == tablet {\n         @include mq(min-width, tablet) {\n            @each $feature, $nested-map in $map {\n               @each $prop, $value in $nested-map {\n                  --#{$prop}: #{$value};\n               }\n            }\n         }\n      } @else if $screen-size == desktop {\n         @include mq(min-width, desktop) {\n            @each $feature, $nested-map in $map {\n               @each $prop, $value in $nested-map {\n                  --#{$prop}: #{$value};\n               }\n            }\n         }\n      }\n   }\n\n   @each $screen-size, $map in $layout {\n      @if $screen-size == mobile {\n         @each $prop, $value in $map {\n            --#{$prop}: #{$value};\n         }\n      } @else if $screen-size == tablet {\n         @include mq(min-width, tablet) {\n            @each $prop, $value in $map {\n               --#{$prop}: #{$value};\n            }\n         }\n      } @else if $screen-size == desktop {\n         @include mq(min-width, desktop) {\n            @each $prop, $value in $map {\n               --#{$prop}: #{$value};\n            }\n         }\n      }\n   }\n\n   --ff-pm: 'Rubik', sans-serif;\n}\n","@use 'colors' as *;\n\n@each $color, $value in $colors {\n   .text-#{$color} {\n      color: hsl(var(--clr-#{$color}));\n   }\n\n   .bg-#{$color} {\n      background-color: hsl(var(--clr-#{$color}));\n   }\n}\n","@use 'font-sizes' as *;\n\n@each $screen-size, $map in $type-scale {\n   @if $screen-size == mobile {\n      @each $feature, $nested-map in $map {\n         @if $feature == size {\n            @each $property, $value in $nested-map {\n               .#{$property} {\n                  font-size: var(--#{$property});\n               }\n            }\n         } @else if $feature == line-height {\n            @each $property, $value in $nested-map {\n               .#{$property} {\n                  line-height: var(--#{$property});\n               }\n            }\n         } @else {\n            @each $property, $value in $nested-map {\n               .#{$property} {\n                  font-weight: var(--#{$property});\n               }\n            }\n         }\n      }\n   }\n}\n","@use 'abstracts' as *;\n\nbody {\n   @include flexy($dir: column);\n}\n\nmain {\n   flex-grow: 1;\n}\n\nfieldset {\n   padding: 0;\n   margin: 0;\n   border: none;\n}\n\na {\n   text-decoration: none;\n}\n\nbutton {\n   border: none;\n   outline: none;\n   background: transparent;\n   &:hover {\n      cursor: pointer;\n   }\n}\n\ninput,\ntextarea {\n   outline: none;\n   width: 100%;\n   border: 0;\n}\n","@use 'breakpoints' as *;\n\n// =========================================\n// BEM\n// =========================================\n\n@mixin e($element) {\n   &__#{$element} {\n      @content;\n   }\n}\n\n@mixin m($modifier) {\n   &--#{$modifier} {\n      @content;\n   }\n}\n\n// =========================================\n// flex\n// =========================================\n\n@mixin flexy($disp: flex, $dir: null, $wrap: null, $just: null, $align: null) {\n   display: $disp;\n   flex-direction: $dir;\n   flex-wrap: $wrap;\n   justify-content: $just;\n   align-items: $align;\n}\n\n// =========================================\n// position\n// =========================================\n\n@mixin position($pos, $width: null, $height: null, $z-index: null) {\n   position: $pos;\n   width: $width;\n   height: $height;\n   z-index: $z-index;\n   @content;\n}\n\n// =========================================\n// bg-img\n// =========================================\n\n@mixin bg-img($img: null, $position: null, $size: null) {\n   background-image: url('#{$img}');\n   background-repeat: no-repeat;\n   background-position: $position;\n   background-size: $size;\n}\n\n// =========================================\n// pseudo-el\n// =========================================\n\n@mixin p-el(\n   $el,\n   $content: '',\n   $position: absolute,\n   $width: null,\n   $height: null\n) {\n   @if $el == 'before' or $el == 'after' {\n      &::#{$el} {\n         content: $content;\n         position: $position;\n         display: block;\n         width: $width;\n         height: $height;\n         @content;\n      }\n   } @else {\n      @error 'Before or after string required for valid pseudo element.';\n   }\n}\n\n// =========================================\n// uppercase\n// =========================================\n\n@mixin uc() {\n   text-transform: uppercase;\n   letter-spacing: 1px;\n   // easier to read when applied  to non-headings\n}\n\n// =========================================\n// media query\n// =========================================\n\n@mixin mq($width, $key) {\n   @if $width ==\n      'max-width' or\n      $width ==\n      'min-width' or\n      $key ==\n      'tablet' or\n      $key ==\n      'desktop'\n   {\n      @media only screen and ($width: map-get($breakpoints, $key)) {\n         @content;\n      }\n   } @else {\n      @error 'Tablet, medium, desktop & valid width required for media query.';\n   }\n}\n\n@mixin mqs($minWidth, $minKey, $maxWidth, $maxKey) {\n   @media only screen and ($minWidth: map-get($breakpoints, $minKey)) and ($maxWidth: map-get($breakpoints, $maxKey)) {\n      @content;\n   }\n}\n\n// =========================================\n// feature queries\n// =========================================\n\n@mixin fq($prop, $val) {\n   @supports (#{$prop}: $val) {\n      @content;\n   }\n}\n\n@mixin fqs($selector) {\n   @supports selector(#{$selector}) {\n      @content;\n   }\n}\n","/* Box sizing rules */\n*,\n*::before,\n*::after {\n   box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n   margin: 0;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n   list-style: none;\n   padding: 0;\n   margin: 0;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n   scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n   min-height: 100vh;\n   text-rendering: optimizeSpeed;\n   line-height: 1.5;\n   overflow-x: hidden;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n   text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\nimg,\npicture {\n   max-width: 100%;\n   display: block;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n   font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n   html:focus-within {\n      scroll-behavior: auto;\n   }\n   *,\n   *::before,\n   *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n   }\n}\n","@use 'abstracts' as *;\n\n.container-wrapper {\n   width: 90%;\n   max-width: 1000px;\n   margin-inline: auto;\n}\n","@use 'abstracts' as *;\n\n.flow > *:where(:not(:first-child)) {\n   margin-top: var(--flow-space, 1rem);\n}\n","@use 'abstracts' as *;\n\n.sr-only {\n   position: absolute;\n   width: 1px;\n   height: 1px;\n   padding: 0;\n   margin: -1px;\n   overflow: hidden;\n   clip: rect(0, 0, 0, 0);\n   white-space: nowrap;\n   border: 0;\n}\n","@use 'abstracts' as *;\n\n.grid-container {\n   display: grid;\n   gap: var(--gap, 2rem);\n   @include mq(min-width, tablet) {\n      grid-auto-flow: column;\n      grid-auto-columns: 1fr;\n   }\n}\n"]}