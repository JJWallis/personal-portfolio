{"version":3,"sources":["styles/abstracts/_variables.scss","styles/abstracts/_mixins.scss","styles/abstracts/_color-utilities.scss","styles/abstracts/_fonts.scss","styles/base/_base.scss","styles/base/_reset.scss","styles/components/_skip-to-content.scss","styles/layout/_header.scss","styles/layout/_sidebar.scss","styles/layout/_nav.scss","styles/layout/_intro.scss","styles/layout/_services.scss","styles/layout/_about.scss","styles/layout/_work.scss","styles/layout/_cta.scss","styles/layout/_footer.scss","styles/utilities/_container.scss","styles/utilities/_flow.scss","styles/utilities/_sr-only.scss","styles/utilities/_grid.scss","styles/utilities/_uppercase.scss","styles/utilities/_text-center.scss"],"names":[],"mappings":"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","file":"main.48b3db1d.css","sourceRoot":"../src","sourcesContent":["@use 'layout' as *;\n@use 'font-sizes' as *;\n@use 'mixins' as *;\n@use 'colors' as *;\n\n:root {\n   --ff-pm: 'Rubik', sans-serif;\n   --hover-transition: 0.3s linear;\n   --sidebar-transition: 0.4s linear;\n\n   @each $color, $map in $color-shades {\n      @each $shade, $val in $map {\n         --clr-#{$color}-#{$shade}: #{$val};\n      }\n   }\n\n   @each $color, $value in $colors {\n      --clr-#{$color}: #{$value};\n   }\n\n   @each $screen-size, $map in $type-scale {\n      @if $screen-size == mobile {\n         @each $feature, $nested-map in $map {\n            @each $prop, $value in $nested-map {\n               --#{$prop}: #{$value};\n            }\n         }\n      } @else if $screen-size == tablet {\n         @include mq(min-width, tablet) {\n            @each $feature, $nested-map in $map {\n               @each $prop, $value in $nested-map {\n                  --#{$prop}: #{$value};\n               }\n            }\n         }\n      } @else if $screen-size == desktop {\n         @include mq(min-width, desktop) {\n            @each $feature, $nested-map in $map {\n               @each $prop, $value in $nested-map {\n                  --#{$prop}: #{$value};\n               }\n            }\n         }\n      }\n   }\n\n   @each $screen-size, $map in $layout {\n      @if $screen-size == mobile {\n         @each $prop, $value in $map {\n            --#{$prop}: #{$value};\n         }\n      } @else if $screen-size == tablet {\n         @include mq(min-width, tablet) {\n            @each $prop, $value in $map {\n               --#{$prop}: #{$value};\n            }\n         }\n      } @else if $screen-size == desktop {\n         @include mq(min-width, desktop) {\n            @each $prop, $value in $map {\n               --#{$prop}: #{$value};\n            }\n         }\n      }\n   }\n}\n","@use 'breakpoints' as *;\n\n// =========================================\n// BEM\n// =========================================\n\n@mixin e($element) {\n   &__#{$element} {\n      @content;\n   }\n}\n\n@mixin m($modifier) {\n   &--#{$modifier} {\n      @content;\n   }\n}\n\n// =========================================\n// flex\n// =========================================\n\n@mixin flexy($disp: flex, $dir: null, $wrap: null, $just: null, $align: null) {\n   display: $disp;\n   flex-direction: $dir;\n   flex-wrap: $wrap;\n   justify-content: $just;\n   align-items: $align;\n}\n\n// =========================================\n// position\n// =========================================\n\n@mixin position($pos, $width: null, $height: null, $z-index: null) {\n   position: $pos;\n   width: $width;\n   height: $height;\n   z-index: $z-index;\n   @content;\n}\n\n// =========================================\n// bg-img\n// =========================================\n\n@mixin bg-img($img: null, $position: null, $size: null) {\n   background-image: url('#{$img}');\n   background-repeat: no-repeat;\n   background-position: $position;\n   background-size: $size;\n}\n\n// =========================================\n// pseudo-el\n// =========================================\n\n@mixin p-el(\n   $el,\n   $content: '',\n   $position: absolute,\n   $width: null,\n   $height: null\n) {\n   @if $el == 'before' or $el == 'after' {\n      &::#{$el} {\n         content: $content;\n         position: $position;\n         display: block;\n         width: $width;\n         height: $height;\n         @content;\n      }\n   } @else {\n      @error 'Before or after string required for valid pseudo element.';\n   }\n}\n\n// =========================================\n// uppercase\n// =========================================\n\n@mixin uc() {\n   text-transform: uppercase;\n   letter-spacing: 1px;\n   // easier to read when applied  to non-headings\n}\n\n// =========================================\n// media query\n// =========================================\n\n@mixin mq($width, $key) {\n   @if $width ==\n      'max-width' or\n      $width ==\n      'min-width' or\n      $key ==\n      'tablet' or\n      $key ==\n      'desktop'\n   {\n      @media only screen and ($width: map-get($breakpoints, $key)) {\n         @content;\n      }\n   } @else {\n      @error 'Tablet, medium, desktop & valid width required for media query.';\n   }\n}\n\n@mixin mqs($minWidth, $minKey, $maxWidth, $maxKey) {\n   @media only screen and ($minWidth: map-get($breakpoints, $minKey)) and ($maxWidth: map-get($breakpoints, $maxKey)) {\n      @content;\n   }\n}\n\n// =========================================\n// feature queries\n// =========================================\n\n@mixin fq($prop, $val) {\n   @supports (#{$prop}: $val) {\n      @content;\n   }\n}\n\n@mixin fqs($selector) {\n   @supports selector(#{$selector}) {\n      @content;\n   }\n}\n","@use 'colors' as *;\n\n@each $color, $value in $colors {\n   .text-#{$color} {\n      color: hsl(var(--clr-#{$color}));\n   }\n\n   .bg-#{$color} {\n      background-color: hsl(var(--clr-#{$color}));\n   }\n}\n\n@each $color, $map in $color-shades {\n   @each $shade, $val in $map {\n      .text-#{$color}-#{$shade} {\n         color: hsl(var(--clr-#{$color}-#{$shade}));\n      }\n      .bg-#{$color}-#{$shade} {\n         background-color: hsl(var(--clr-#{$color}-#{$shade}));\n      }\n   }\n}\n","@use 'font-sizes' as *;\n\n@each $screen-size, $map in $type-scale {\n   @if $screen-size == mobile {\n      @each $feature, $nested-map in $map {\n         @if $feature == size {\n            @each $property, $value in $nested-map {\n               .#{$property} {\n                  font-size: var(--#{$property});\n               }\n            }\n         } @else if $feature == line-height {\n            @each $property, $value in $nested-map {\n               .#{$property} {\n                  line-height: var(--#{$property});\n               }\n            }\n         } @else {\n            @each $property, $value in $nested-map {\n               .#{$property} {\n                  font-weight: var(--#{$property});\n               }\n            }\n         }\n      }\n   }\n}\n","@use 'abstracts' as *;\n\nbody {\n   @include flexy($dir: column);\n}\n\nmain {\n   flex-grow: 1;\n}\n\nfieldset {\n   padding: 0;\n   margin: 0;\n   border: none;\n}\n\na {\n   text-decoration: none;\n}\n\nbutton {\n   border: none;\n   outline: none;\n   background: transparent;\n   &:hover {\n      cursor: pointer;\n   }\n}\n\ninput,\ntextarea {\n   outline: none;\n   width: 100%;\n   border: 0;\n}\n","/* Box sizing rules */\n*,\n*::before,\n*::after {\n   box-sizing: border-box;\n}\n\n/* Remove default margin */\nbody,\nh1,\nh2,\nh3,\nh4,\np,\nfigure,\nblockquote,\ndl,\ndd {\n   margin: 0;\n}\n\n/*  permission to use hard wraps when no soft wrap opportunties */\n\np,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n   overflow-wrap: break-word;\n}\n\n/* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\nul[role='list'],\nol[role='list'] {\n   list-style: none;\n   padding: 0;\n   margin: 0;\n}\n\n/* Set core root defaults */\nhtml:focus-within {\n   scroll-behavior: smooth;\n}\n\n/* Set core body defaults */\nbody {\n   min-height: 100vh;\n   text-rendering: optimizeSpeed;\n   line-height: 1.5;\n   overflow-x: hidden;\n   -webkit-font-smoothing: antialiased;\n}\n\n/* A elements that don't have a class get default styles */\na:not([class]) {\n   text-decoration-skip-ink: auto;\n}\n\n/* Make images easier to work with */\n\nimg,\npicture,\nvideo,\ncanvas,\nsvg {\n   display: block;\n   max-width: 100%;\n}\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n   font: inherit;\n}\n\n/* Remove all animations and transitions for people that prefer not to see them */\n@media (prefers-reduced-motion: reduce) {\n   html:focus-within {\n      scroll-behavior: auto;\n   }\n   *,\n   *::before,\n   *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n   }\n}\n","@use 'abstracts' as *;\n\n.skip-to-content {\n   @include position(absolute, $z-index: 9999) {\n      top: 0;\n      left: 50%;\n      transform: translate(-50%, -100%);\n   }\n\n   transition: transform var(--hover-transition);\n\n   &:hover,\n   &:focus {\n      transform: translate(-50%, 0);\n   }\n}\n","@use 'abstracts' as *;\n\n.header {\n   @include m(pm) {\n      padding: var(--ct-padding-header);\n      position: relative;\n\n      @include mq(min-width, tablet) {\n         @include flexy($align: center, $just: space-between);\n         padding-right: 20px;\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.sidebar {\n   @include mq(max-width, tablet) {\n      background-color: hsl(var(--clr-soft-white));\n      @include position(fixed, $z-index: 9997) {\n         inset: 0 0 0 calc(100% - 300px);\n         width: 300px;\n         padding: 4rem 0 min(5rem, 15vh);\n      }\n      transform: translateX(100%);\n      transition: transform var(--sidebar-transition);\n   }\n}\n","@use 'abstracts' as *;\n\n.nav {\n   & a {\n      color: hsl(var(--clr-text-pale-blue));\n      @include mq(max-width, tablet) {\n         display: block;\n         color: hsl(var(--clr-pm-dark-blue));\n         &:hover {\n            color: hsl(var(--clr-text-blue));\n         }\n      }\n      transition: color var(--hover-transition);\n   }\n\n   @include e(list) {\n      @include flexy($dir: column);\n      gap: 1rem;\n      @include mq(min-width, tablet) {\n         @include flexy($dir: row);\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.intro {\n   padding: var(--ct-padding-intro);\n\n   @include e(body) {\n      @include flexy($dir: column, $align: center);\n\n      gap: 1.7rem;\n      @include mq(min-width, tablet) {\n         @include flexy($dir: row);\n         gap: 1.5rem;\n      }\n\n      @include mq(min-width, desktop) {\n         gap: 0;\n      }\n\n      & > * {\n         flex: 1 100%;\n         // outline: 1px solid black;\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.services {\n   padding: var(--ct-padding-services);\n\n   @include e(body) {\n      @include flexy($dir: column);\n      gap: 2.5rem;\n      margin-top: 3rem;\n      @include mq(min-width, desktop) {\n         @include flexy($dir: row);\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.about {\n   padding: var(--ct-padding-about);\n}\n","@use 'abstracts' as *;\n\n.my-work {\n   padding: var(--ct-padding-work);\n}\n","@use 'abstracts' as *;\n\n.cta {\n   padding: var(--ct-padding-cta);\n\n   @include e(body) {\n      @include flexy($dir: column, $align: center);\n      gap: 2rem;\n      @include mq(min-width, tablet) {\n         @include flexy($dir: row, $just: space-between);\n      }\n   }\n\n   @include e(arrow) {\n      width: 30px;\n      @include mq(min-width, tablet) {\n         transform: rotate(90deg);\n         margin-right: 2.2rem;\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.footer {\n   @include m(pm) {\n      padding: var(--ct-padding-footer);\n      @include e(body) {\n         @include flexy($dir: column, $align: center, $just: center);\n      }\n   }\n}\n","@use 'abstracts' as *;\n\n.container-wrapper {\n   // outline: 1px solid black;\n   width: 90%;\n   max-width: 1000px;\n   margin-inline: auto;\n}\n","@use 'abstracts' as *;\n\n.flow > *:where(:not(:first-child)) {\n   margin-top: var(--flow-space, 1rem);\n}\n","@use 'abstracts' as *;\n\n.sr-only {\n   position: absolute;\n   width: 1px;\n   height: 1px;\n   padding: 0;\n   margin: -1px;\n   overflow: hidden;\n   clip: rect(0, 0, 0, 0);\n   white-space: nowrap;\n   border: 0;\n}\n","@use 'abstracts' as *;\n\n.grid-container {\n   display: grid;\n   gap: var(--gap, 2rem);\n}\n","@use 'abstracts' as *;\n\n.uppercase {\n   @include uc();\n}\n","@use 'abstracts' as *;\n\n.text-center {\n   text-align: var(--center);\n}\n\n.text-center-tablet {\n   text-align: var(--center-left-tablet);\n}\n\n.text-center-desktop {\n   text-align: var(--center-left-desktop);\n}\n"]}